/**
 * Created by Justin on 2015/9/1.
 * Car2Go 系统日志记录器 swishlog v0.3.0
 */

var winston=require("winston");
var DailyRotateFile = require('winston-daily-rotate-file');
var strftime=require("strftime");
var fs=require("fs");
var path = require('path');
var util = require('util');
var morgan = require('morgan');

var logfilePath = path.join(__dirname, '../../logs');

/* morgan -> winston */
var seq_no = 0;

/* if prefix to each line */
//var prefix = '';

/* token('response-time') */
function response_time(req, res){
  if (!res._header || !req._startAt) return '';
  var diff = process.hrtime(req._startAt);
  var ms = diff[0] * 1e3 + diff[1] * 1e-6;
  return ms.toFixed(3);
}

function check_time(req, res) {
  var res_time = Number(response_time(req, res));

  if (res_time > 500) {
    query_logger.warn(
      req.headers['x-forwarded-for'] || '-',
      req.connection.remoteAddress.substr(7),
      req.connection.remotePort || '-',
      (req.user && req.user.username) || '-',
      req.method,
      req.originalUrl || req.url,
      res._header && (res.statusCode || '-'),
      res._headers['content-length'] || '-',
      res_time + 'ms');
  }

  /* abuse morgan skip */
  return false;
}

exports = module.exports = function (req, res, next) {
  var username = '-';
  var remoteAddress = req.connection.remoteAddress || '';
  var remotePort = req.connection.remotePort;
  var format;

  ++seq_no;

  if (req.user)
    username = req.user.username;

  /* if prefix to each line */
  //prefix = (req.headers['x-forwarded-for'] || '-') + ' ';
  //prefix += req.connection.remoteAddress + ' ';
  //prefix += req.connection.remotePort + ' ';
  //prefix += username + ' ';

  format = ':req[x-forwarded-for] ';
  format += remoteAddress.substr(7) + ' ' + remotePort + ' ';
  format += username + ' ';
  format += ':method :url :status :res[content-length] :response-time ms';

  morgan(format, {
    skip: check_time,
    stream: {
      write: function (str) {
        query_logger.info(str);
      }
    }
  })(req, res, next);
};


function common_formatter(options) {
  var res;

  res = strftime('%y-%m-%d %H:%M:%S.%L') + ' ';
  res += seq_no + ' ';
  res += options.level.toUpperCase() + ' ';
  res += undefined !== options.message ? options.message : '';
  res += options.meta && Object.keys(options.meta).length ? '\n\t'+ JSON.stringify(options.meta) : '';
  return res;
}

var common_transports = [
  new winston.transports.Console({
    level: 'debug',
    formatter: common_formatter,
    exitOnError: false
  }),

  new DailyRotateFile({
    name: 'info-file',
    filename: logfilePath + '/swish.log',
    datePattern: '-yyMMdd',
    maxsize: 10*1024*1024,
    json: false,
    level: 'debug',
    formatter: common_formatter,
    exitOnError: false
  }),

  new winston.transports.File({
    name: 'warn-file',
    filename: logfilePath + '/swish-warn.log',
    maxsize: 10*1024*1024,
    json: false,
    prettyPrint: true,
    level: 'warn',
    formatter: common_formatter,
    exitOnError:false
  }),

  new winston.transports.File({
    name: 'error-file',
    filename: logfilePath + '/swish-err.log',
    maxsize: 10*1024*1024,
    json: false,
    prettyPrint: true,
    level: 'error',
    formatter: common_formatter,
      exitOnError: false
  }),

  new DailyRotateFile({
    name: 'trans-file',
    filename: logfilePath + '/transaction.log',
    datePattern: '-yyMMdd',
    maxsize: 10*1024*1024,
    json: false,
    level: 'trans',
    formatter: common_formatter,
    exitOnError: false
  })
];

function SwishLogger(name) {
  var self = this;
  this.name = name;

  winston.Logger.call(this, {
    transports: common_transports,
    levels: {
      trans: 0,
      error: 1,
      warn: 2,
      info: 3,
      debug: 4,
    }
  });

  /* if prefix to each line */
  //this.filters.push(
  //  function (level, msg, meta) {
  //    return prefix + msg;
  //  }
  //);

  this.filters.push(
    function (level, msg, meta) {
      return '[' + self.name + '] ' + msg;
    }
  );
}
util.inherits(SwishLogger, winston.Logger);

exports.car2gologger = exports.logger =
  function (moduleName) {
    moduleName = path.relative(path.join(__dirname, '../..'), moduleName);

    // 检测日志文件夹是否存在
    if (!fs.existsSync(logfilePath)) {
      fs.mkdirSync(logfilePath,0777);
    }

    return new SwishLogger(moduleName);
}

query_logger = exports.logger('ACC');

winston.handleExceptions([
  new winston.transports.Console({
    level: 'error',
    exitOnError: false
  }),
  new winston.transports.File({
    filename: logfilePath + '/exceptions.log',
    exitOnError: false
  })
]);
